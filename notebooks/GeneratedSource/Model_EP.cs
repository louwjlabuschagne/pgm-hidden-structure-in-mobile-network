// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Math;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 13:47 on Tuesday, 11 October 2022.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_isDetractor has executed. Set this to false to force re-execution of Changed_isDetractor</summary>
		public bool Changed_isDetractor_isDone;
		/// <summary>True if Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0 has executed. Set this to false to force re-execution of Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0</summary>
		public bool Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0_isDone;
		/// <summary>True if Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12 has executed. Set this to false to force re-execution of Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12</summary>
		public bool Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isDone;
		/// <summary>True if Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12 has performed initialisation. Set this to false to force re-execution of Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12</summary>
		public bool Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isInitialised;
		/// <summary>True if Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8 has executed. Set this to false to force re-execution of Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8</summary>
		public bool Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isDone;
		/// <summary>True if Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8 has performed initialisation. Set this to false to force re-execution of Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8</summary>
		public bool Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isInitialised;
		/// <summary>True if Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7 has executed. Set this to false to force re-execution of Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7</summary>
		public bool Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isDone;
		/// <summary>True if Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7 has performed initialisation. Set this to false to force re-execution of Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7</summary>
		public bool Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5</summary>
		public bool Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5</summary>
		public bool Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11</summary>
		public bool Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11</summary>
		public bool Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9</summary>
		public bool Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9</summary>
		public bool Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2</summary>
		public bool Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2</summary>
		public bool Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isInitialised;
		/// <summary>True if Changed_numSitesForCustomers has executed. Set this to false to force re-execution of Changed_numSitesForCustomers</summary>
		public bool Changed_numSitesForCustomers_isDone;
		/// <summary>True if Changed_sitesLabel has executed. Set this to false to force re-execution of Changed_sitesLabel</summary>
		public bool Changed_sitesLabel_isDone;
		/// <summary>True if Changed_sitesLabel_vbool__6 has executed. Set this to false to force re-execution of Changed_sitesLabel_vbool__6</summary>
		public bool Changed_sitesLabel_vbool__6_isDone;
		/// <summary>True if Changed_vbool__5 has executed. Set this to false to force re-execution of Changed_vbool__5</summary>
		public bool Changed_vbool__5_isDone;
		/// <summary>True if Changed_vbool__6 has executed. Set this to false to force re-execution of Changed_vbool__6</summary>
		public bool Changed_vbool__6_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Message to marginal of 'falseDetractor'</summary>
		public Beta falseDetractor_marginal_F;
		public Beta[] falseDetractor_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Beta&gt;</summary>
		public Beta falseDetractor_rep_B_toDef;
		/// <summary>Message to marginal of 'hadBadSiteInt'</summary>
		public DistributionStructArray<Bernoulli,bool> hadBadSiteInt_marginal_F;
		/// <summary>Field backing the isDetractor property</summary>
		private bool[] IsDetractor;
		/// <summary>Message to marginal of 'isDetractor'</summary>
		public DistributionStructArray<Bernoulli,bool> isDetractor_marginal_F;
		/// <summary>Field backing the kpis property</summary>
		private Vector[] Kpis;
		public VectorGaussian means_item0_F;
		public VectorGaussian[] means_item0_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;VectorGaussian&gt;</summary>
		public VectorGaussian means_item0_rep_B_toDef;
		public VectorGaussian[] means_item0_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;VectorGaussian&gt;</summary>
		public VectorGaussian means_item0_rep_F_marginal;
		/// <summary>Messages from uses of 'means_item0_use'</summary>
		public VectorGaussian[] means_item0_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;VectorGaussian&gt;</summary>
		public VectorGaussian means_item0_uses_B_toDef;
		/// <summary>Messages to uses of 'means_item0_use'</summary>
		public VectorGaussian[] means_item0_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;VectorGaussian&gt;</summary>
		public VectorGaussian means_item0_uses_F_marginal;
		public VectorGaussian means_item1_F;
		public VectorGaussian[] means_item1_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;VectorGaussian&gt;</summary>
		public VectorGaussian means_item1_rep_B_toDef;
		public VectorGaussian[] means_item1_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;VectorGaussian&gt;</summary>
		public VectorGaussian means_item1_rep_F_marginal;
		/// <summary>Messages from uses of 'means_item1_use'</summary>
		public VectorGaussian[] means_item1_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;VectorGaussian&gt;</summary>
		public VectorGaussian means_item1_uses_B_toDef;
		/// <summary>Messages to uses of 'means_item1_use'</summary>
		public VectorGaussian[] means_item1_uses_F;
		/// <summary>Buffer for VectorElementOp.ItemAverageConditional</summary>
		public Vector means_item1_uses_F_1__ArrayMean;
		/// <summary>Buffer for VectorElementOp.ArrayMean</summary>
		public PositiveDefiniteMatrix means_item1_uses_F_1__ArrayVariance;
		/// <summary>Buffer for VectorElementOp.ItemAverageConditional</summary>
		public Vector means_item1_uses_F_2__ArrayMean;
		/// <summary>Buffer for VectorElementOp.ArrayMean</summary>
		public PositiveDefiniteMatrix means_item1_uses_F_2__ArrayVariance;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;VectorGaussian&gt;</summary>
		public VectorGaussian means_item1_uses_F_marginal;
		/// <summary>Message to marginal of 'means'</summary>
		public DistributionRefArray<VectorGaussian,Vector> means_marginal_F;
		/// <summary>The constant 'means_mp'</summary>
		public VectorGaussian[] means_mp;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the numSitesForCustomers property</summary>
		private int[] NumSitesForCustomers;
		public Wishart[] precisions_0__1__B;
		public Wishart[] precisions_1__0__B;
		public Wishart precisions_F_reduced;
		/// <summary>Message to marginal of 'precisions'</summary>
		public DistributionRefArray<Wishart,PositiveDefiniteMatrix> precisions_marginal_F;
		public Wishart[] precisions_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Wishart&gt;</summary>
		public Wishart precisions_rep_B_toDef;
		public Wishart[] precisions_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Wishart&gt;</summary>
		public Wishart precisions_rep_F_marginal;
		public Wishart[] precisions_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Wishart&gt;</summary>
		public Wishart precisions_rep2_B_toDef;
		public Wishart[] precisions_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Wishart&gt;</summary>
		public Wishart precisions_rep2_F_marginal;
		public DistributionStructArray<Bernoulli,bool>[] relevantSites_B;
		public DistributionStructArray<Bernoulli,bool> sites_depth0_B;
		public DistributionStructArray<Bernoulli,bool> sites_depth0_F;
		/// <summary>Message to marginal of 'sites_depth0'</summary>
		public DistributionStructArray<Bernoulli,bool> sites_depth0_marginal_F;
		public Bernoulli[] sites_index0_0_2_B;
		public Bernoulli[] sites_index0_1__F;
		public Bernoulli[] sites_index0_1__selector_cases_0_B;
		/// <summary>Messages from uses of 'sites_index0_1__selector_cases_0'</summary>
		public Bernoulli[][] sites_index0_1__selector_cases_0_uses_B;
		public Bernoulli[] sites_index0_1__selector_cases_1_B;
		/// <summary>Messages from uses of 'sites_index0_1__selector_cases_1'</summary>
		public Bernoulli[][] sites_index0_1__selector_cases_1_uses_B;
		public DistributionStructArray<Bernoulli,bool>[] sites_index0_1__selector_cases_B;
		/// <summary>Messages from uses of 'sites_index0_1__selector'</summary>
		public Bernoulli[][] sites_index0_1__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Bernoulli&gt;</summary>
		public Bernoulli[] sites_index0_1__selector_uses_B_toDef;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Bernoulli&gt;</summary>
		public Bernoulli[] sites_index0_1__selector_uses_F_marginal;
		/// <summary>Message from use of 'sites_index0_1_'</summary>
		public Bernoulli[] sites_index0_1__use_B;
		/// <summary>Messages from uses of 'sites_index0_1__use'</summary>
		public Bernoulli[][] sites_index0_1__uses_B;
		/// <summary>Messages to uses of 'sites_index0_1__use'</summary>
		public Bernoulli[][] sites_index0_1__uses_F;
		/// <summary>Message to marginal of 'sites'</summary>
		public DistributionStructArray<Bernoulli,bool> sites_marginal_F;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> sites_sitesTouched_F;
		/// <summary>Message from use of 'sites'</summary>
		public DistributionStructArray<Bernoulli,bool> sites_use_B;
		/// <summary>Message to use of 'sites'</summary>
		public DistributionStructArray<Bernoulli,bool> sites_use_F;
		/// <summary>Messages from uses of 'sites_use'</summary>
		public Bernoulli[][] sites_uses_B;
		/// <summary>Messages to uses of 'sites_use'</summary>
		public Bernoulli[][] sites_uses_F;
		/// <summary>Field backing the sitesLabel property</summary>
		private bool[] SitesLabel;
		/// <summary>Message to marginal of 'sitesLabel'</summary>
		public DistributionStructArray<Bernoulli,bool> sitesLabel_marginal_F;
		/// <summary>Field backing the sitesTouched property</summary>
		private int[][] SitesTouched;
		/// <summary>Message to marginal of 'trueDetractor'</summary>
		public Beta trueDetractor_marginal_F;
		public Beta[] trueDetractor_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Beta&gt;</summary>
		public Beta trueDetractor_rep_B_toDef;
		/// <summary>The constant 'vBeta0'</summary>
		public Beta vBeta0;
		/// <summary>The constant 'vBeta1'</summary>
		public Beta vBeta1;
		/// <summary>The constant 'vBeta2'</summary>
		public Beta vBeta2;
		/// <summary>Field backing the vbool__5 property</summary>
		private bool[] Vbool__5;
		/// <summary>Message to marginal of 'vbool__5'</summary>
		public DistributionStructArray<Bernoulli,bool> vbool__5_marginal_F;
		/// <summary>Field backing the vbool__6 property</summary>
		private bool[] Vbool__6;
		/// <summary>Message to marginal of 'vbool__6'</summary>
		public DistributionStructArray<Bernoulli,bool> vbool__6_marginal_F;
		public DistributionStructArray<Bernoulli,bool>[] vbool__8_F;
		/// <summary>The constant 'vbool11'</summary>
		public bool vbool11;
		/// <summary>Message to marginal of 'vbool11'</summary>
		public Bernoulli vbool11_marginal_F;
		/// <summary>The constant 'vbool9'</summary>
		public bool vbool9;
		/// <summary>Message to marginal of 'vbool9'</summary>
		public Bernoulli vbool9_marginal_F;
		public Gaussian vdouble4_F;
		/// <summary>Message to marginal of 'vdouble4'</summary>
		public Gaussian vdouble4_marginal_F;
		/// <summary>Message to marginal of 'vdouble5'</summary>
		public Gaussian vdouble5_marginal_F;
		/// <summary>Message to marginal of 'vdouble6'</summary>
		public Gaussian vdouble6_marginal_F;
		public Gaussian vdouble7_F;
		/// <summary>Message to marginal of 'vdouble7'</summary>
		public Gaussian vdouble7_marginal_F;
		/// <summary>Message to marginal of 'vdouble8'</summary>
		public Gaussian vdouble8_marginal_F;
		/// <summary>Message to marginal of 'vdouble9'</summary>
		public Gaussian vdouble9_marginal_F;
		/// <summary>The constant 'vPositiveDefiniteMatrix3'</summary>
		public PositiveDefiniteMatrix vPositiveDefiniteMatrix3;
		public Beta[] weights_1__B;
		/// <summary>Message to marginal of 'weights'</summary>
		public Beta weights_marginal_F;
		public Beta[] weights_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Beta&gt;</summary>
		public Beta weights_rep_B_toDef;
		public Beta[] weights_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional&lt;Beta&gt;</summary>
		public Beta weights_rep_F_marginal;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'isDetractor'</summary>
		public bool[] isDetractor
		{
			get {
				return this.IsDetractor;
			}
			set {
				if ((value!=null)&&(value.Length!=987)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+987)+" was expected for variable \'isDetractor\'");
				}
				this.IsDetractor = value;
				this.numberOfIterationsDone = 0;
				this.Changed_isDetractor_isDone = false;
				this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isInitialised = false;
				this.Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'kpis'</summary>
		public Vector[] kpis
		{
			get {
				return this.Kpis;
			}
			set {
				if ((value!=null)&&(value.Length!=1500)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1500)+" was expected for variable \'kpis\'");
				}
				this.Kpis = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isDone = false;
				this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isDone = false;
				this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isDone = false;
				this.Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'numSitesForCustomers'</summary>
		public int[] numSitesForCustomers
		{
			get {
				return this.NumSitesForCustomers;
			}
			set {
				if ((value!=null)&&(value.Length!=987)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+987)+" was expected for variable \'numSitesForCustomers\'");
				}
				this.NumSitesForCustomers = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numSitesForCustomers_isDone = false;
				this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isDone = false;
				this.Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'sitesLabel'</summary>
		public bool[] sitesLabel
		{
			get {
				return this.SitesLabel;
			}
			set {
				if ((value!=null)&&(value.Length!=1500)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1500)+" was expected for variable \'sitesLabel\'");
				}
				this.SitesLabel = value;
				this.numberOfIterationsDone = 0;
				this.Changed_sitesLabel_isDone = false;
				this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isInitialised = false;
				this.Changed_sitesLabel_vbool__6_isDone = false;
				this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isDone = false;
				this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isDone = false;
				this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isDone = false;
				this.Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'sitesTouched'</summary>
		public int[][] sitesTouched
		{
			get {
				return this.SitesTouched;
			}
			set {
				if ((value!=null)&&(value.Length!=987)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+987)+" was expected for variable \'sitesTouched\'");
				}
				this.SitesTouched = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isDone = false;
				this.Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vbool__5'</summary>
		public bool[] vbool__5
		{
			get {
				return this.Vbool__5;
			}
			set {
				if ((value!=null)&&(value.Length!=1500)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1500)+" was expected for variable \'vbool__5\'");
				}
				this.Vbool__5 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vbool__5_isDone = false;
				this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isDone = false;
				this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isDone = false;
				this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isDone = false;
				this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isDone = false;
				this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isDone = false;
				this.Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vbool__6'</summary>
		public bool[] vbool__6
		{
			get {
				return this.Vbool__6;
			}
			set {
				if ((value!=null)&&(value.Length!=1500)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+1500)+" was expected for variable \'vbool__6\'");
				}
				this.Vbool__6 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isInitialised = false;
				this.Changed_vbool__6_isDone = false;
				this.Changed_sitesLabel_vbool__6_isDone = false;
				this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isDone = false;
				this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isInitialised = false;
				this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isDone = false;
				this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isDone = false;
				this.Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of isDetractor</summary>
		private void Changed_isDetractor()
		{
			if (this.Changed_isDetractor_isDone) {
				return ;
			}
			// Create array for 'isDetractor_marginal' Forwards messages.
			this.isDetractor_marginal_F = new DistributionStructArray<Bernoulli,bool>(987);
			for(int index1 = 0; index1<987; index1++) {
				this.isDetractor_marginal_F[index1] = Bernoulli.Uniform();
			}
			// Message to 'isDetractor_marginal' from DerivedVariable factor
			this.isDetractor_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Bernoulli,bool>,bool[]>(this.IsDetractor, this.isDetractor_marginal_F);
			this.Changed_isDetractor_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of isDetractor and kpis and numberOfIterations and numSitesForCustomers and sitesLabel and sitesTouched and vbool__5 and vbool__6</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0(int numberOfIterations)
		{
			if (this.Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0_isDone) {
				return ;
			}
			DistributionStructArray<Bernoulli,bool> sites_F;
			// Create array for 'sites' Forwards messages.
			sites_F = new DistributionStructArray<Bernoulli,bool>(1500);
			// Create array for 'sites_marginal' Forwards messages.
			this.sites_marginal_F = new DistributionStructArray<Bernoulli,bool>(1500);
			// Create array for replicates of 'means_1__0__B'
			VectorGaussian[] means_1__0__B = new VectorGaussian[1500];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					means_1__0__B[index0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
				}
			}
			// Create array for replicates of 'means_1__B'
			VectorGaussian[][] means_1__B = new VectorGaussian[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Create array for 'means_1_' Backwards messages.
					means_1__B[index0] = new VectorGaussian[1];
				}
				for(int _gateind = 0; _gateind<1; _gateind++) {
					if (!this.Vbool__5[index0]) {
						means_1__B[index0][_gateind] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
					}
				}
			}
			// Create array for replicates of 'sites_index0_1__selector_uses_F'
			Bernoulli[][] sites_index0_1__selector_uses_F = new Bernoulli[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Create array for 'sites_index0_1__selector_uses' Forwards messages.
					sites_index0_1__selector_uses_F[index0] = new Bernoulli[5];
					sites_index0_1__selector_uses_F[index0][3] = Bernoulli.Uniform();
					sites_index0_1__selector_uses_F[index0][4] = Bernoulli.Uniform();
					sites_index0_1__selector_uses_F[index0][1] = Bernoulli.Uniform();
					sites_index0_1__selector_uses_F[index0][2] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'means_1_1__B'
			VectorGaussian[] means_1_1__B = new VectorGaussian[1500];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					means_1_1__B[index0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
				}
			}
			this.means_item1_uses_B[3] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
			this.means_item0_uses_F[1] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
			PositiveDefiniteMatrix means_item0_uses_F_1__ArrayVariance;
			means_item0_uses_F_1__ArrayVariance = VectorElementOp.ArrayVarianceInit(this.means_item0_uses_F[1]);
			Vector means_item0_uses_F_1__ArrayMean;
			means_item0_uses_F_1__ArrayMean = VectorElementOp.ArrayMeanInit(this.means_item0_uses_F[1]);
			Gaussian vdouble5_F = Gaussian.Uniform();
			Gaussian vdouble6_F = Gaussian.Uniform();
			Gaussian vdouble6_use_B = Gaussian.Uniform();
			Gaussian vdouble4_use_B = Gaussian.Uniform();
			this.means_item0_uses_F[2] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
			PositiveDefiniteMatrix means_item0_uses_F_2__ArrayVariance;
			means_item0_uses_F_2__ArrayVariance = VectorElementOp.ArrayVarianceInit(this.means_item0_uses_F[2]);
			Vector means_item0_uses_F_2__ArrayMean;
			means_item0_uses_F_2__ArrayMean = VectorElementOp.ArrayMeanInit(this.means_item0_uses_F[2]);
			Gaussian vdouble8_F = Gaussian.Uniform();
			Gaussian vdouble9_F = Gaussian.Uniform();
			Gaussian vdouble9_use_B = Gaussian.Uniform();
			Gaussian vdouble7_use_B = Gaussian.Uniform();
			this.means_item1_uses_B[0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
			Beta falseDetractor_rep_F_marginal;
			falseDetractor_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.vBeta1);
			Beta[] falseDetractor_rep_F;
			// Create array for 'falseDetractor_rep' Forwards messages.
			falseDetractor_rep_F = new Beta[987];
			for(int index1 = 0; index1<987; index1++) {
				falseDetractor_rep_F[index1] = Beta.Uniform();
			}
			// Create array for replicates of 'hadBadSiteInt_index1__selector_cases_1_uses_B'
			Bernoulli[][] hadBadSiteInt_index1__selector_cases_1_uses_B = new Bernoulli[987][];
			for(int index1 = 0; index1<987; index1++) {
				// Create array for 'hadBadSiteInt_index1__selector_cases_1_uses' Backwards messages.
				hadBadSiteInt_index1__selector_cases_1_uses_B[index1] = new Bernoulli[3];
				hadBadSiteInt_index1__selector_cases_1_uses_B[index1][1] = Bernoulli.Uniform();
				hadBadSiteInt_index1__selector_cases_1_uses_B[index1][0] = Bernoulli.Uniform();
				hadBadSiteInt_index1__selector_cases_1_uses_B[index1][2] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'hadBadSiteInt_index1__selector_cases_1_B'
			Bernoulli[] hadBadSiteInt_index1__selector_cases_1_B = new Bernoulli[987];
			for(int index1 = 0; index1<987; index1++) {
				hadBadSiteInt_index1__selector_cases_1_B[index1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'hadBadSiteInt_index1__selector_cases_B'
			DistributionStructArray<Bernoulli,bool>[] hadBadSiteInt_index1__selector_cases_B = new DistributionStructArray<Bernoulli,bool>[987];
			for(int index1 = 0; index1<987; index1++) {
				// Create array for 'hadBadSiteInt_index1__selector_cases' Backwards messages.
				hadBadSiteInt_index1__selector_cases_B[index1] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					hadBadSiteInt_index1__selector_cases_B[index1][_ind0] = Bernoulli.Uniform();
				}
			}
			Beta trueDetractor_rep_F_marginal;
			trueDetractor_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.vBeta0);
			Beta[] trueDetractor_rep_F;
			// Create array for 'trueDetractor_rep' Forwards messages.
			trueDetractor_rep_F = new Beta[987];
			for(int index1 = 0; index1<987; index1++) {
				trueDetractor_rep_F[index1] = Beta.Uniform();
			}
			// Create array for replicates of 'hadBadSiteInt_index1__selector_cases_0_uses_B'
			Bernoulli[][] hadBadSiteInt_index1__selector_cases_0_uses_B = new Bernoulli[987][];
			for(int index1 = 0; index1<987; index1++) {
				// Create array for 'hadBadSiteInt_index1__selector_cases_0_uses' Backwards messages.
				hadBadSiteInt_index1__selector_cases_0_uses_B[index1] = new Bernoulli[3];
				hadBadSiteInt_index1__selector_cases_0_uses_B[index1][1] = Bernoulli.Uniform();
				hadBadSiteInt_index1__selector_cases_0_uses_B[index1][0] = Bernoulli.Uniform();
				hadBadSiteInt_index1__selector_cases_0_uses_B[index1][2] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'hadBadSiteInt_index1__selector_cases_0_B'
			Bernoulli[] hadBadSiteInt_index1__selector_cases_0_B = new Bernoulli[987];
			for(int index1 = 0; index1<987; index1++) {
				hadBadSiteInt_index1__selector_cases_0_B[index1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'hadBadSiteInt_index1__selector_uses_B'
			Bernoulli[][] hadBadSiteInt_index1__selector_uses_B = new Bernoulli[987][];
			for(int index1 = 0; index1<987; index1++) {
				// Create array for 'hadBadSiteInt_index1__selector_uses' Backwards messages.
				hadBadSiteInt_index1__selector_uses_B[index1] = new Bernoulli[3];
				hadBadSiteInt_index1__selector_uses_B[index1][1] = Bernoulli.Uniform();
				hadBadSiteInt_index1__selector_uses_B[index1][2] = Bernoulli.Uniform();
				hadBadSiteInt_index1__selector_uses_B[index1][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'hadBadSiteInt_index1__selector_uses_B_toDef'
			Bernoulli[] hadBadSiteInt_index1__selector_uses_B_toDef = new Bernoulli[987];
			DistributionStructArray<Bernoulli,bool> hadBadSiteInt_F;
			// Create array for 'hadBadSiteInt' Forwards messages.
			hadBadSiteInt_F = new DistributionStructArray<Bernoulli,bool>(987);
			for(int index1 = 0; index1<987; index1++) {
				hadBadSiteInt_F[index1] = Bernoulli.Uniform();
				hadBadSiteInt_index1__selector_uses_B_toDef[index1] = ReplicateOp_Divide.ToDefInit<Bernoulli>(hadBadSiteInt_F[index1]);
			}
			// Create array for replicates of 'anyTrue_B'
			Bernoulli[] anyTrue_B = new Bernoulli[987];
			for(int index1 = 0; index1<987; index1++) {
				anyTrue_B[index1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool__8_B'
			DistributionStructArray<Bernoulli,bool>[] vbool__8_B = new DistributionStructArray<Bernoulli,bool>[987];
			for(int index1 = 0; index1<987; index1++) {
				// Create array for 'vbool__8' Backwards messages.
				vbool__8_B[index1] = new DistributionStructArray<Bernoulli,bool>(this.NumSitesForCustomers[index1]);
				for(int customersSites = 0; customersSites<this.NumSitesForCustomers[index1]; customersSites++) {
					vbool__8_B[index1][customersSites] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'anyTrue_F'
			Bernoulli[] anyTrue_F = new Bernoulli[987];
			for(int index1 = 0; index1<987; index1++) {
				anyTrue_F[index1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'hadBadSiteInt_index1__selector_uses_F_marginal'
			Bernoulli[] hadBadSiteInt_index1__selector_uses_F_marginal = new Bernoulli[987];
			for(int index1 = 0; index1<987; index1++) {
				hadBadSiteInt_index1__selector_uses_F_marginal[index1] = ReplicateOp_Divide.MarginalInit<Bernoulli>(hadBadSiteInt_F[index1]);
			}
			// Create array for replicates of 'hadBadSiteInt_index1__selector_uses_F'
			Bernoulli[][] hadBadSiteInt_index1__selector_uses_F = new Bernoulli[987][];
			for(int index1 = 0; index1<987; index1++) {
				// Create array for 'hadBadSiteInt_index1__selector_uses' Forwards messages.
				hadBadSiteInt_index1__selector_uses_F[index1] = new Bernoulli[3];
				hadBadSiteInt_index1__selector_uses_F[index1][2] = Bernoulli.Uniform();
				hadBadSiteInt_index1__selector_uses_F[index1][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'trueDetractor__0__B'
			Beta[] trueDetractor__0__B = new Beta[987];
			// Create array for replicates of 'trueDetractor__B'
			Beta[][] trueDetractor__B = new Beta[987][];
			for(int index1 = 0; index1<987; index1++) {
				// Create array for 'trueDetractor_' Backwards messages.
				trueDetractor__B[index1] = new Beta[1];
				for(int _gateind5 = 0; _gateind5<1; _gateind5++) {
					trueDetractor__B[index1][_gateind5] = Beta.Uniform();
				}
				trueDetractor__0__B[index1] = Beta.Uniform();
				// Message to 'trueDetractor__0_' from Bernoulli factor
				trueDetractor__0__B[index1] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.IsDetractor[index1]);
				// Message to 'trueDetractor_' from Copy factor
				trueDetractor__B[index1][0] = ArrayHelper.SetTo<Beta>(trueDetractor__B[index1][0], trueDetractor__0__B[index1]);
			}
			// Create array for replicates of 'precisions_1__B'
			Wishart[][] precisions_1__B = new Wishart[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Create array for 'precisions_1_' Backwards messages.
					precisions_1__B[index0] = new Wishart[1];
				}
				for(int _gateind2 = 0; _gateind2<1; _gateind2++) {
					if (!this.Vbool__5[index0]) {
						precisions_1__B[index0][_gateind2] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
					}
				}
			}
			// Create array for replicates of 'precisions_1_1__B'
			Wishart[] precisions_1_1__B = new Wishart[1500];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					precisions_1_1__B[index0] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
				}
			}
			// Create array for replicates of 'means_0__1__B'
			VectorGaussian[] means_0__1__B = new VectorGaussian[1500];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					means_0__1__B[index0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
				}
			}
			// Create array for replicates of 'means_0__B'
			VectorGaussian[][] means_0__B = new VectorGaussian[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Create array for 'means_0_' Backwards messages.
					means_0__B[index0] = new VectorGaussian[1];
				}
				for(int _gateind3 = 0; _gateind3<1; _gateind3++) {
					if (!this.Vbool__5[index0]) {
						means_0__B[index0][_gateind3] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
					}
				}
			}
			// Create array for replicates of 'means_0_1__B'
			VectorGaussian[] means_0_1__B = new VectorGaussian[1500];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					means_0_1__B[index0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
				}
			}
			this.means_item0_uses_B[3] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
			Gaussian vdouble8_use_B = Gaussian.Uniform();
			Gaussian vdouble5_use_B = Gaussian.Uniform();
			this.means_item0_uses_B[0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
			// Create array for replicates of 'precisions_0__B'
			Wishart[][] precisions_0__B = new Wishart[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Create array for 'precisions_0_' Backwards messages.
					precisions_0__B[index0] = new Wishart[1];
				}
				for(int _gateind4 = 0; _gateind4<1; _gateind4++) {
					if (!this.Vbool__5[index0]) {
						precisions_0__B[index0][_gateind4] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
					}
				}
			}
			// Create array for replicates of 'precisions_0_1__B'
			Wishart[] precisions_0_1__B = new Wishart[1500];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					precisions_0_1__B[index0] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
				}
			}
			// Create array for replicates of 'falseDetractor__1__B'
			Beta[] falseDetractor__1__B = new Beta[987];
			// Create array for replicates of 'falseDetractor__B'
			Beta[][] falseDetractor__B = new Beta[987][];
			for(int index1 = 0; index1<987; index1++) {
				// Create array for 'falseDetractor_' Backwards messages.
				falseDetractor__B[index1] = new Beta[1];
				for(int _gateind6 = 0; _gateind6<1; _gateind6++) {
					falseDetractor__B[index1][_gateind6] = Beta.Uniform();
				}
				falseDetractor__1__B[index1] = Beta.Uniform();
				// Message to 'falseDetractor__1_' from Bernoulli factor
				falseDetractor__1__B[index1] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.IsDetractor[index1]);
				// Message to 'falseDetractor_' from Copy factor
				falseDetractor__B[index1][0] = ArrayHelper.SetTo<Beta>(falseDetractor__B[index1][0], falseDetractor__1__B[index1]);
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.precisions_rep2_F_marginal = ReplicateOp_Divide.Marginal<Wishart>(this.precisions_rep2_B_toDef, this.precisions_F_reduced, this.precisions_rep2_F_marginal);
				for(int index0 = 0; index0<1500; index0++) {
					// Message to 'precisions_rep2' from Replicate factor
					this.precisions_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Wishart>(this.precisions_rep2_B[index0], this.precisions_rep2_F_marginal, index0, this.precisions_rep2_F[index0]);
				}
				this.means_item0_uses_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(this.means_item0_uses_B_toDef, this.means_item0_F, this.means_item0_uses_F_marginal);
				// Message to 'means_item0_uses' from Replicate factor
				this.means_item0_uses_F[3] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item0_rep_B_toDef, this.means_item0_uses_F_marginal, 3, this.means_item0_uses_F[3]);
				this.means_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(this.means_item0_rep_B_toDef, this.means_item0_uses_F[3], this.means_item0_rep_F_marginal);
				for(int index0 = 0; index0<1500; index0++) {
					// Message to 'means_item0_rep' from Replicate factor
					this.means_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item0_rep_B[index0], this.means_item0_rep_F_marginal, index0, this.means_item0_rep_F[index0]);
					if (!this.Vbool__5[index0]) {
						// Message to 'precisions_0__1_' from VectorGaussian factor
						this.precisions_0__1__B[index0] = VectorGaussianOp_Laplace2.PrecisionAverageConditional(VectorGaussian.PointMass(this.Kpis[index0]), this.means_item0_rep_F[index0], this.precisions_rep2_F[index0], this.precisions_0__1__B[index0], this.precisions_0__1__B[index0]);
					}
				}
				this.precisions_rep_F_marginal = ReplicateOp_Divide.Marginal<Wishart>(this.precisions_rep_B_toDef, this.precisions_F_reduced, this.precisions_rep_F_marginal);
				for(int index0 = 0; index0<1500; index0++) {
					// Message to 'precisions_rep' from Replicate factor
					this.precisions_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Wishart>(this.precisions_rep_B[index0], this.precisions_rep_F_marginal, index0, this.precisions_rep_F[index0]);
					if (!this.Vbool__5[index0]) {
						// Message to 'means_1__0_' from VectorGaussian factor
						means_1__0__B[index0] = VectorGaussianOp_Laplace2.MeanAverageConditional(VectorGaussian.PointMass(this.Kpis[index0]), this.precisions_rep_F[index0], this.precisions_1__0__B[index0], means_1__0__B[index0]);
						// Message to 'means_1_' from Copy factor
						means_1__B[index0][0] = ArrayHelper.SetTo<VectorGaussian>(means_1__B[index0][0], means_1__0__B[index0]);
						// Message to 'sites_index0_1__selector_uses' from Replicate factor
						sites_index0_1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.sites_index0_1__selector_uses_B[index0][1], this.sites_index0_1__selector_uses_F_marginal[index0], 1, sites_index0_1__selector_uses_F[index0][1]);
						// Message to 'means_1_1_' from EnterPartial factor
						means_1_1__B[index0] = GateEnterPartialOp<Vector>.ValueAverageConditional<VectorGaussian>(means_1__B[index0], sites_index0_1__selector_uses_F[index0][1], this.means_item1_rep_F[index0], new int[1] {0}, means_1_1__B[index0]);
						// Message to 'means_item1_rep' from Copy factor
						this.means_item1_rep_B[index0] = ArrayHelper.SetTo<VectorGaussian>(this.means_item1_rep_B[index0], means_1_1__B[index0]);
					}
				}
				this.means_item1_rep_B_toDef = ReplicateOp_Divide.ToDef<VectorGaussian>(this.means_item1_rep_B, this.means_item1_rep_B_toDef);
				// Message to 'means_item0_uses' from Replicate factor
				this.means_item0_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item0_uses_B[1], this.means_item0_uses_F_marginal, 1, this.means_item0_uses_F[1]);
				means_item0_uses_F_1__ArrayVariance = VectorElementOp.ArrayVariance(this.means_item0_uses_F[1], means_item0_uses_F_1__ArrayVariance);
				means_item0_uses_F_1__ArrayMean = VectorElementOp.ArrayMean(this.means_item0_uses_F[1], means_item0_uses_F_1__ArrayVariance, means_item0_uses_F_1__ArrayMean);
				// Message to 'vdouble5' from GetItem factor
				vdouble5_F = VectorElementOp.ItemAverageConditional(this.means_item0_uses_F[1], means_item0_uses_F_1__ArrayMean, means_item0_uses_F_1__ArrayVariance, 0);
				// Message to 'vdouble6' from Difference factor
				vdouble6_F = DoublePlusOp.AAverageConditional(vdouble5_F, this.vdouble4_F);
				// Message to 'vdouble6_use' from IsPositive factor
				vdouble6_use_B = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble6_F);
				// Message to 'vdouble4_use' from Difference factor
				vdouble4_use_B = DoublePlusOp.BAverageConditional(vdouble5_F, vdouble6_use_B);
				// Message to 'means_item1_uses' from GetItem factor
				this.means_item1_uses_B[1] = VectorElementOp.ArrayAverageConditional(vdouble4_use_B, 0, this.means_item1_uses_B[1]);
				// Message to 'means_item0_uses' from Replicate factor
				this.means_item0_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item0_uses_B[2], this.means_item0_uses_F_marginal, 2, this.means_item0_uses_F[2]);
				means_item0_uses_F_2__ArrayVariance = VectorElementOp.ArrayVariance(this.means_item0_uses_F[2], means_item0_uses_F_2__ArrayVariance);
				means_item0_uses_F_2__ArrayMean = VectorElementOp.ArrayMean(this.means_item0_uses_F[2], means_item0_uses_F_2__ArrayVariance, means_item0_uses_F_2__ArrayMean);
				// Message to 'vdouble8' from GetItem factor
				vdouble8_F = VectorElementOp.ItemAverageConditional(this.means_item0_uses_F[2], means_item0_uses_F_2__ArrayMean, means_item0_uses_F_2__ArrayVariance, 1);
				// Message to 'vdouble9' from Difference factor
				vdouble9_F = DoublePlusOp.AAverageConditional(vdouble8_F, this.vdouble7_F);
				// Message to 'vdouble9_use' from IsPositive factor
				vdouble9_use_B = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(true), vdouble9_F);
				// Message to 'vdouble7_use' from Difference factor
				vdouble7_use_B = DoublePlusOp.BAverageConditional(vdouble8_F, vdouble9_use_B);
				// Message to 'means_item1_uses' from GetItem factor
				this.means_item1_uses_B[2] = VectorElementOp.ArrayAverageConditional(vdouble7_use_B, 1, this.means_item1_uses_B[2]);
				// Message to 'means_item1_uses' from Replicate factor
				this.means_item1_uses_B[3] = ArrayHelper.SetTo<VectorGaussian>(this.means_item1_uses_B[3], this.means_item1_rep_B_toDef);
				this.means_item1_uses_B_toDef = ReplicateOp_Divide.ToDef<VectorGaussian>(this.means_item1_uses_B, this.means_item1_uses_B_toDef);
				this.means_item1_uses_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(this.means_item1_uses_B_toDef, this.means_item1_F, this.means_item1_uses_F_marginal);
				// Message to 'means_item1_uses' from Replicate factor
				this.means_item1_uses_F[3] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item1_rep_B_toDef, this.means_item1_uses_F_marginal, 3, this.means_item1_uses_F[3]);
				this.means_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(this.means_item1_rep_B_toDef, this.means_item1_uses_F[3], this.means_item1_rep_F_marginal);
				for(int index0 = 0; index0<1500; index0++) {
					// Message to 'means_item1_rep' from Replicate factor
					this.means_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item1_rep_B[index0], this.means_item1_rep_F_marginal, index0, this.means_item1_rep_F[index0]);
					if (!this.Vbool__5[index0]) {
						// Message to 'precisions_1__0_' from VectorGaussian factor
						this.precisions_1__0__B[index0] = VectorGaussianOp_Laplace2.PrecisionAverageConditional(VectorGaussian.PointMass(this.Kpis[index0]), this.means_item1_rep_F[index0], this.precisions_rep_F[index0], this.precisions_1__0__B[index0], this.precisions_1__0__B[index0]);
						// Message to 'sites_index0_1__selector_cases_1_uses' from VectorGaussian factor
						this.sites_index0_1__selector_cases_1_uses_B[index0][4] = Bernoulli.FromLogOdds(VectorGaussianOp_Laplace2.LogEvidenceRatio(this.Kpis[index0], this.means_item0_rep_F[index0], this.precisions_rep2_F[index0], this.precisions_0__1__B[index0]));
						// Message to 'sites_index0_1__selector_cases_1' from Replicate factor
						this.sites_index0_1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.sites_index0_1__selector_cases_1_uses_B[index0], this.sites_index0_1__selector_cases_1_B[index0]);
						// Message to 'sites_index0_1__selector_cases' from Copy factor
						this.sites_index0_1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.sites_index0_1__selector_cases_B[index0][1], this.sites_index0_1__selector_cases_1_B[index0]);
						// Message to 'sites_index0_1__selector_cases_0_uses' from VectorGaussian factor
						this.sites_index0_1__selector_cases_0_uses_B[index0][4] = Bernoulli.FromLogOdds(VectorGaussianOp_Laplace2.LogEvidenceRatio(this.Kpis[index0], this.means_item1_rep_F[index0], this.precisions_rep_F[index0], this.precisions_1__0__B[index0]));
						// Message to 'sites_index0_1__selector_cases_0' from Replicate factor
						this.sites_index0_1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.sites_index0_1__selector_cases_0_uses_B[index0], this.sites_index0_1__selector_cases_0_B[index0]);
						// Message to 'sites_index0_1__selector_cases' from Copy factor
						this.sites_index0_1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.sites_index0_1__selector_cases_B[index0][0], this.sites_index0_1__selector_cases_0_B[index0]);
						// Message to 'sites_index0_1__selector_uses' from Cases factor
						this.sites_index0_1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.sites_index0_1__selector_cases_B[index0]);
						this.sites_index0_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.sites_index0_1__selector_uses_B[index0], this.sites_index0_1__selector_uses_B_toDef[index0]);
						// Message to 'sites_index0_1__uses' from Copy factor
						this.sites_index0_1__uses_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.sites_index0_1__uses_B[index0][1], this.sites_index0_1__selector_uses_B_toDef[index0]);
						// Message to 'sites_index0_1__use' from Replicate factor
						this.sites_index0_1__use_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.sites_index0_1__uses_B[index0], this.sites_index0_1__use_B[index0]);
						// Message to 'weights_1_' from Bernoulli factor
						this.weights_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.sites_index0_1__use_B[index0], this.weights_rep_F[index0]);
						// Message to 'weights_rep' from Copy factor
						this.weights_rep_B[index0] = ArrayHelper.SetTo<Beta>(this.weights_rep_B[index0], this.weights_1__B[index0]);
					}
				}
				this.weights_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.weights_rep_B, this.weights_rep_B_toDef);
				this.weights_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.weights_rep_B_toDef, this.vBeta2, this.weights_rep_F_marginal);
				for(int index0 = 0; index0<1500; index0++) {
					// Message to 'weights_rep' from Replicate factor
					this.weights_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.weights_rep_B[index0], this.weights_rep_F_marginal, index0, this.weights_rep_F[index0]);
					if (!this.Vbool__5[index0]) {
						// Message to 'sites_index0_1_' from Bernoulli factor
						this.sites_index0_1__F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.weights_rep_F[index0]);
						// Message to 'sites_index0_1__uses' from Replicate factor
						this.sites_index0_1__uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Bernoulli>(this.sites_index0_1__uses_B[index0], this.sites_index0_1__F[index0], 0, this.sites_index0_1__uses_F[index0][0]);
						// Message to 'sites_uses' from Replicate factor
						this.sites_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Bernoulli>(this.sites_uses_B[index0], this.sites_index0_1__uses_F[index0][0], 1, this.sites_uses_F[index0][1]);
					}
					// Message to 'sites_depth0' from Copy factor
					this.sites_depth0_F[index0] = ArrayHelper.SetTo<Bernoulli>(this.sites_depth0_F[index0], this.sites_uses_F[index0][1]);
				}
				this.sites_depth0_marginal_F = JaggedSubarrayWithMarginalOp<bool>.MarginalIncrementArray<DistributionStructArray<Bernoulli,bool>>(this.sites_depth0_F, this.sites_depth0_B, this.sites_depth0_marginal_F);
				falseDetractor_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.falseDetractor_rep_B_toDef, this.vBeta1, falseDetractor_rep_F_marginal);
				for(int index1 = 0; index1<987; index1++) {
					// Message to 'falseDetractor_rep' from Replicate factor
					falseDetractor_rep_F[index1] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.falseDetractor_rep_B[index1], falseDetractor_rep_F_marginal, index1, falseDetractor_rep_F[index1]);
				}
				trueDetractor_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.trueDetractor_rep_B_toDef, this.vBeta0, trueDetractor_rep_F_marginal);
				for(int index1 = 0; index1<987; index1++) {
					// Message to 'trueDetractor_rep' from Replicate factor
					trueDetractor_rep_F[index1] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.trueDetractor_rep_B[index1], trueDetractor_rep_F_marginal, index1, trueDetractor_rep_F[index1]);
					// Message to 'hadBadSiteInt_index1__selector_cases_1_uses' from Bernoulli factor
					hadBadSiteInt_index1__selector_cases_1_uses_B[index1][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.IsDetractor[index1], falseDetractor_rep_F[index1]));
					// Message to 'hadBadSiteInt_index1__selector_cases_1' from Replicate factor
					hadBadSiteInt_index1__selector_cases_1_B[index1] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(hadBadSiteInt_index1__selector_cases_1_uses_B[index1], hadBadSiteInt_index1__selector_cases_1_B[index1]);
					// Message to 'hadBadSiteInt_index1__selector_cases' from Copy factor
					hadBadSiteInt_index1__selector_cases_B[index1][1] = ArrayHelper.SetTo<Bernoulli>(hadBadSiteInt_index1__selector_cases_B[index1][1], hadBadSiteInt_index1__selector_cases_1_B[index1]);
					// Message to 'hadBadSiteInt_index1__selector_cases_0_uses' from Bernoulli factor
					hadBadSiteInt_index1__selector_cases_0_uses_B[index1][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.IsDetractor[index1], trueDetractor_rep_F[index1]));
					// Message to 'hadBadSiteInt_index1__selector_cases_0' from Replicate factor
					hadBadSiteInt_index1__selector_cases_0_B[index1] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(hadBadSiteInt_index1__selector_cases_0_uses_B[index1], hadBadSiteInt_index1__selector_cases_0_B[index1]);
					// Message to 'hadBadSiteInt_index1__selector_cases' from Copy factor
					hadBadSiteInt_index1__selector_cases_B[index1][0] = ArrayHelper.SetTo<Bernoulli>(hadBadSiteInt_index1__selector_cases_B[index1][0], hadBadSiteInt_index1__selector_cases_0_B[index1]);
					// Message to 'hadBadSiteInt_index1__selector_uses' from Cases factor
					hadBadSiteInt_index1__selector_uses_B[index1][0] = CasesOp.BAverageConditional(hadBadSiteInt_index1__selector_cases_B[index1]);
					hadBadSiteInt_index1__selector_uses_B_toDef[index1] = ReplicateOp_Divide.ToDef<Bernoulli>(hadBadSiteInt_index1__selector_uses_B[index1], hadBadSiteInt_index1__selector_uses_B_toDef[index1]);
					// Message to 'anyTrue' from Not factor
					anyTrue_B[index1] = BooleanNotOp.BAverageConditional(hadBadSiteInt_index1__selector_uses_B_toDef[index1]);
					// Message to 'vbool__8' from AllTrue factor
					vbool__8_B[index1] = AllTrueOp.ArrayAverageConditional<DistributionStructArray<Bernoulli,bool>>(anyTrue_B[index1], this.vbool__8_F[index1], vbool__8_B[index1]);
					for(int customersSites = 0; customersSites<this.NumSitesForCustomers[index1]; customersSites++) {
						// Message to 'relevantSites' from Not factor
						this.relevantSites_B[index1][customersSites] = BooleanNotOp.BAverageConditional(vbool__8_B[index1][customersSites]);
					}
				}
				// Message to 'sites_depth0_marginal' from JaggedSubarrayWithMarginal factor
				this.sites_depth0_marginal_F = JaggedSubarrayWithMarginalOp<bool>.MarginalAverageConditional<DistributionStructArray<Bernoulli,bool>,Bernoulli,DistributionStructArray<Bernoulli,bool>>(this.sites_depth0_F, this.relevantSites_B, this.SitesTouched, this.sites_depth0_marginal_F);
				for(int index1 = 0; index1<987; index1++) {
					// Message to 'sites_sitesTouched' from JaggedSubarrayWithMarginal factor
					this.sites_sitesTouched_F[index1] = JaggedSubarrayWithMarginalOp<bool>.ItemsAverageConditional<DistributionStructArray<Bernoulli,bool>,Bernoulli,DistributionStructArray<Bernoulli,bool>>(this.relevantSites_B[index1], this.sites_depth0_F, this.sites_depth0_marginal_F, this.SitesTouched, index1, this.sites_sitesTouched_F[index1]);
					for(int customersSites = 0; customersSites<this.NumSitesForCustomers[index1]; customersSites++) {
						// Message to 'vbool__8' from Not factor
						this.vbool__8_F[index1][customersSites] = BooleanNotOp.NotAverageConditional(this.sites_sitesTouched_F[index1][customersSites]);
					}
					// Message to 'anyTrue' from AllTrue factor
					anyTrue_F[index1] = AllTrueOp.AllTrueAverageConditional(this.vbool__8_F[index1]);
					// Message to 'hadBadSiteInt' from Not factor
					hadBadSiteInt_F[index1] = BooleanNotOp.NotAverageConditional(anyTrue_F[index1]);
					hadBadSiteInt_index1__selector_uses_F_marginal[index1] = ReplicateOp_Divide.Marginal<Bernoulli>(hadBadSiteInt_index1__selector_uses_B_toDef[index1], hadBadSiteInt_F[index1], hadBadSiteInt_index1__selector_uses_F_marginal[index1]);
					// Message to 'hadBadSiteInt_index1__selector_uses' from Replicate factor
					hadBadSiteInt_index1__selector_uses_F[index1][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(hadBadSiteInt_index1__selector_uses_B[index1][1], hadBadSiteInt_index1__selector_uses_F_marginal[index1], 1, hadBadSiteInt_index1__selector_uses_F[index1][1]);
					// Message to 'trueDetractor_rep' from EnterPartial factor
					this.trueDetractor_rep_B[index1] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(trueDetractor__B[index1], hadBadSiteInt_index1__selector_uses_F[index1][1], trueDetractor_rep_F[index1], new int[1] {0}, this.trueDetractor_rep_B[index1]);
					// Message to 'hadBadSiteInt_index1__selector_uses' from Replicate factor
					hadBadSiteInt_index1__selector_uses_F[index1][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(hadBadSiteInt_index1__selector_uses_B[index1][2], hadBadSiteInt_index1__selector_uses_F_marginal[index1], 2, hadBadSiteInt_index1__selector_uses_F[index1][2]);
					// Message to 'falseDetractor_rep' from EnterPartial factor
					this.falseDetractor_rep_B[index1] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(falseDetractor__B[index1], hadBadSiteInt_index1__selector_uses_F[index1][2], falseDetractor_rep_F[index1], new int[1] {1}, this.falseDetractor_rep_B[index1]);
				}
				this.trueDetractor_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.trueDetractor_rep_B, this.trueDetractor_rep_B_toDef);
				// Message to 'sites_depth0' from JaggedSubarrayWithMarginal factor
				this.sites_depth0_B = JaggedSubarrayWithMarginalOp<bool>.ArrayAverageConditional<DistributionStructArray<Bernoulli,bool>>(this.sites_depth0_F, this.sites_depth0_marginal_F, this.sites_depth0_B);
				for(int index0 = 0; index0<1500; index0++) {
					// Message to 'sites_uses' from Copy factor
					this.sites_uses_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.sites_uses_B[index0][1], this.sites_depth0_B[index0]);
					if (!this.Vbool__5[index0]) {
						// Message to 'sites_use' from Replicate factor
						this.sites_use_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.sites_uses_B[index0], this.sites_use_B[index0]);
						// Message to 'precisions_1_' from Copy factor
						precisions_1__B[index0][0] = ArrayHelper.SetTo<Wishart>(precisions_1__B[index0][0], this.precisions_1__0__B[index0]);
						// Message to 'sites_index0_1__uses' from Copy factor
						this.sites_index0_1__uses_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.sites_index0_1__uses_B[index0][0], this.sites_use_B[index0]);
						// Message to 'sites_index0_1__uses' from Replicate factor
						this.sites_index0_1__uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Bernoulli>(this.sites_index0_1__uses_B[index0], this.sites_index0_1__F[index0], 1, this.sites_index0_1__uses_F[index0][1]);
						this.sites_index0_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.sites_index0_1__selector_uses_B_toDef[index0], this.sites_index0_1__uses_F[index0][1], this.sites_index0_1__selector_uses_F_marginal[index0]);
						// Message to 'sites_index0_1__selector_uses' from Replicate factor
						sites_index0_1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.sites_index0_1__selector_uses_B[index0][2], this.sites_index0_1__selector_uses_F_marginal[index0], 2, sites_index0_1__selector_uses_F[index0][2]);
						// Message to 'precisions_1_1_' from EnterPartial factor
						precisions_1_1__B[index0] = GateEnterPartialOp<PositiveDefiniteMatrix>.ValueAverageConditional<Wishart>(precisions_1__B[index0], sites_index0_1__selector_uses_F[index0][2], this.precisions_rep_F[index0], new int[1] {0}, precisions_1_1__B[index0]);
						// Message to 'precisions_rep' from Copy factor
						this.precisions_rep_B[index0] = ArrayHelper.SetTo<Wishart>(this.precisions_rep_B[index0], precisions_1_1__B[index0]);
						// Message to 'means_0__1_' from VectorGaussian factor
						means_0__1__B[index0] = VectorGaussianOp_Laplace2.MeanAverageConditional(VectorGaussian.PointMass(this.Kpis[index0]), this.precisions_rep2_F[index0], this.precisions_0__1__B[index0], means_0__1__B[index0]);
						// Message to 'means_0_' from Copy factor
						means_0__B[index0][0] = ArrayHelper.SetTo<VectorGaussian>(means_0__B[index0][0], means_0__1__B[index0]);
						// Message to 'sites_index0_1__selector_uses' from Replicate factor
						sites_index0_1__selector_uses_F[index0][3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.sites_index0_1__selector_uses_B[index0][3], this.sites_index0_1__selector_uses_F_marginal[index0], 3, sites_index0_1__selector_uses_F[index0][3]);
						// Message to 'means_0_1_' from EnterPartial factor
						means_0_1__B[index0] = GateEnterPartialOp<Vector>.ValueAverageConditional<VectorGaussian>(means_0__B[index0], sites_index0_1__selector_uses_F[index0][3], this.means_item0_rep_F[index0], new int[1] {1}, means_0_1__B[index0]);
						// Message to 'means_item0_rep' from Copy factor
						this.means_item0_rep_B[index0] = ArrayHelper.SetTo<VectorGaussian>(this.means_item0_rep_B[index0], means_0_1__B[index0]);
						// Message to 'precisions_0_' from Copy factor
						precisions_0__B[index0][0] = ArrayHelper.SetTo<Wishart>(precisions_0__B[index0][0], this.precisions_0__1__B[index0]);
						// Message to 'sites_index0_1__selector_uses' from Replicate factor
						sites_index0_1__selector_uses_F[index0][4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.sites_index0_1__selector_uses_B[index0][4], this.sites_index0_1__selector_uses_F_marginal[index0], 4, sites_index0_1__selector_uses_F[index0][4]);
						// Message to 'precisions_0_1_' from EnterPartial factor
						precisions_0_1__B[index0] = GateEnterPartialOp<PositiveDefiniteMatrix>.ValueAverageConditional<Wishart>(precisions_0__B[index0], sites_index0_1__selector_uses_F[index0][4], this.precisions_rep2_F[index0], new int[1] {1}, precisions_0_1__B[index0]);
						// Message to 'precisions_rep2' from Copy factor
						this.precisions_rep2_B[index0] = ArrayHelper.SetTo<Wishart>(this.precisions_rep2_B[index0], precisions_0_1__B[index0]);
					}
				}
				this.precisions_rep_B_toDef = ReplicateOp_Divide.ToDef<Wishart>(this.precisions_rep_B, this.precisions_rep_B_toDef);
				this.means_item0_rep_B_toDef = ReplicateOp_Divide.ToDef<VectorGaussian>(this.means_item0_rep_B, this.means_item0_rep_B_toDef);
				// Message to 'means_item0_uses' from Replicate factor
				this.means_item0_uses_B[3] = ArrayHelper.SetTo<VectorGaussian>(this.means_item0_uses_B[3], this.means_item0_rep_B_toDef);
				// Message to 'means_item1_uses' from Replicate factor
				this.means_item1_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item1_uses_B[2], this.means_item1_uses_F_marginal, 2, this.means_item1_uses_F[2]);
				this.means_item1_uses_F_2__ArrayVariance = VectorElementOp.ArrayVariance(this.means_item1_uses_F[2], this.means_item1_uses_F_2__ArrayVariance);
				this.means_item1_uses_F_2__ArrayMean = VectorElementOp.ArrayMean(this.means_item1_uses_F[2], this.means_item1_uses_F_2__ArrayVariance, this.means_item1_uses_F_2__ArrayMean);
				// Message to 'vdouble7' from GetItem factor
				this.vdouble7_F = VectorElementOp.ItemAverageConditional(this.means_item1_uses_F[2], this.means_item1_uses_F_2__ArrayMean, this.means_item1_uses_F_2__ArrayVariance, 1);
				// Message to 'vdouble8_use' from Difference factor
				vdouble8_use_B = DoublePlusOp.SumAverageConditional(vdouble9_use_B, this.vdouble7_F);
				// Message to 'means_item0_uses' from GetItem factor
				this.means_item0_uses_B[2] = VectorElementOp.ArrayAverageConditional(vdouble8_use_B, 1, this.means_item0_uses_B[2]);
				// Message to 'means_item1_uses' from Replicate factor
				this.means_item1_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item1_uses_B[1], this.means_item1_uses_F_marginal, 1, this.means_item1_uses_F[1]);
				this.means_item1_uses_F_1__ArrayVariance = VectorElementOp.ArrayVariance(this.means_item1_uses_F[1], this.means_item1_uses_F_1__ArrayVariance);
				this.means_item1_uses_F_1__ArrayMean = VectorElementOp.ArrayMean(this.means_item1_uses_F[1], this.means_item1_uses_F_1__ArrayVariance, this.means_item1_uses_F_1__ArrayMean);
				// Message to 'vdouble4' from GetItem factor
				this.vdouble4_F = VectorElementOp.ItemAverageConditional(this.means_item1_uses_F[1], this.means_item1_uses_F_1__ArrayMean, this.means_item1_uses_F_1__ArrayVariance, 0);
				// Message to 'vdouble5_use' from Difference factor
				vdouble5_use_B = DoublePlusOp.SumAverageConditional(vdouble6_use_B, this.vdouble4_F);
				// Message to 'means_item0_uses' from GetItem factor
				this.means_item0_uses_B[1] = VectorElementOp.ArrayAverageConditional(vdouble5_use_B, 0, this.means_item0_uses_B[1]);
				this.means_item0_uses_B_toDef = ReplicateOp_Divide.ToDef<VectorGaussian>(this.means_item0_uses_B, this.means_item0_uses_B_toDef);
				this.precisions_rep2_B_toDef = ReplicateOp_Divide.ToDef<Wishart>(this.precisions_rep2_B, this.precisions_rep2_B_toDef);
				this.falseDetractor_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.falseDetractor_rep_B, this.falseDetractor_rep_B_toDef);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int index0 = 0; index0<1500; index0++) {
				sites_F[index0] = Bernoulli.Uniform();
				this.sites_marginal_F[index0] = Bernoulli.Uniform();
				if (this.Vbool__5[index0]) {
					// Message to 'sites_use' from Replicate factor
					this.sites_use_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.sites_uses_B[index0], this.sites_use_B[index0]);
					// Message to 'sites_marginal' from DerivedVariable factor
					this.sites_marginal_F[index0] = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(this.sites_use_B[index0], sites_F[index0], this.sites_marginal_F[index0]);
				}
				if (!this.Vbool__5[index0]) {
					// Message to 'sites_marginal' from DerivedVariable factor
					this.sites_marginal_F[index0] = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(this.sites_use_B[index0], this.sites_index0_1__uses_F[index0][0], this.sites_marginal_F[index0]);
				}
			}
			this.trueDetractor_marginal_F = Beta.Uniform();
			// Message to 'trueDetractor_marginal' from Variable factor
			this.trueDetractor_marginal_F = VariableOp.MarginalAverageConditional<Beta>(this.trueDetractor_rep_B_toDef, this.vBeta0, this.trueDetractor_marginal_F);
			this.falseDetractor_marginal_F = Beta.Uniform();
			// Message to 'falseDetractor_marginal' from Variable factor
			this.falseDetractor_marginal_F = VariableOp.MarginalAverageConditional<Beta>(this.falseDetractor_rep_B_toDef, this.vBeta1, this.falseDetractor_marginal_F);
			this.means_item0_uses_F[0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
			DistributionRefArray<VectorGaussian,Vector> means_use_B;
			// Create array for 'means_use' Backwards messages.
			means_use_B = new DistributionRefArray<VectorGaussian,Vector>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				means_use_B[_iv] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[_iv]);
			}
			// Message to 'means_item0_uses' from Replicate factor
			this.means_item0_uses_F[0] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(means_use_B[0], this.means_item0_uses_F_marginal, 0, this.means_item0_uses_F[0]);
			// Create array for 'means_marginal' Forwards messages.
			this.means_marginal_F = new DistributionRefArray<VectorGaussian,Vector>(2);
			for(int _iv = 0; _iv<2; _iv++) {
				this.means_marginal_F[_iv] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[_iv]);
			}
			// Message to 'means_marginal' from DerivedVariable factor
			this.means_marginal_F[0] = DerivedVariableOp.MarginalAverageConditional<VectorGaussian>(means_use_B[0], this.means_item0_uses_F[0], this.means_marginal_F[0]);
			this.means_item1_uses_F[0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
			// Message to 'means_item1_uses' from Replicate factor
			this.means_item1_uses_F[0] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(means_use_B[1], this.means_item1_uses_F_marginal, 0, this.means_item1_uses_F[0]);
			// Message to 'means_marginal' from DerivedVariable factor
			this.means_marginal_F[1] = DerivedVariableOp.MarginalAverageConditional<VectorGaussian>(means_use_B[1], this.means_item1_uses_F[0], this.means_marginal_F[1]);
			// Create array for 'precisions_marginal' Forwards messages.
			this.precisions_marginal_F = new DistributionRefArray<Wishart,PositiveDefiniteMatrix>(2);
			DistributionRefArray<Wishart,PositiveDefiniteMatrix> precisions_use_B;
			// Create array for 'precisions_use' Backwards messages.
			precisions_use_B = new DistributionRefArray<Wishart,PositiveDefiniteMatrix>(2);
			for(int index3 = 0; index3<2; index3++) {
				precisions_use_B[index3] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
			}
			// Message to 'precisions_use' from Replicate factor
			precisions_use_B[1] = ArrayHelper.SetTo<Wishart>(precisions_use_B[1], this.precisions_rep_B_toDef);
			// Message to 'precisions_use' from Replicate factor
			precisions_use_B[0] = ArrayHelper.SetTo<Wishart>(precisions_use_B[0], this.precisions_rep2_B_toDef);
			for(int index3 = 0; index3<2; index3++) {
				this.precisions_marginal_F[index3] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
				// Message to 'precisions_marginal' from Variable factor
				this.precisions_marginal_F[index3] = VariableOp.MarginalAverageConditional<Wishart>(precisions_use_B[index3], this.precisions_F_reduced, this.precisions_marginal_F[index3]);
			}
			this.weights_marginal_F = Beta.Uniform();
			// Message to 'weights_marginal' from Variable factor
			this.weights_marginal_F = VariableOp.MarginalAverageConditional<Beta>(this.weights_rep_B_toDef, this.vBeta2, this.weights_marginal_F);
			this.vdouble4_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble4_marginal' from DerivedVariable factor
			this.vdouble4_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble4_use_B, this.vdouble4_F, this.vdouble4_marginal_F);
			this.vdouble5_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble5_marginal' from DerivedVariable factor
			this.vdouble5_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble5_use_B, vdouble5_F, this.vdouble5_marginal_F);
			this.vdouble6_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble6_marginal' from DerivedVariable factor
			this.vdouble6_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble6_use_B, vdouble6_F, this.vdouble6_marginal_F);
			this.vdouble7_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble7_marginal' from DerivedVariable factor
			this.vdouble7_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble7_use_B, this.vdouble7_F, this.vdouble7_marginal_F);
			this.vdouble8_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble8_marginal' from DerivedVariable factor
			this.vdouble8_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble8_use_B, vdouble8_F, this.vdouble8_marginal_F);
			this.vdouble9_marginal_F = Gaussian.Uniform();
			// Message to 'vdouble9_marginal' from DerivedVariable factor
			this.vdouble9_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian>(vdouble9_use_B, vdouble9_F, this.vdouble9_marginal_F);
			// Create array for 'hadBadSiteInt_marginal' Forwards messages.
			this.hadBadSiteInt_marginal_F = new DistributionStructArray<Bernoulli,bool>(987);
			for(int index1 = 0; index1<987; index1++) {
				this.hadBadSiteInt_marginal_F[index1] = Bernoulli.Uniform();
				// Message to 'hadBadSiteInt_marginal' from DerivedVariable factor
				this.hadBadSiteInt_marginal_F[index1] = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(hadBadSiteInt_index1__selector_uses_B_toDef[index1], hadBadSiteInt_F[index1], this.hadBadSiteInt_marginal_F[index1]);
			}
			this.Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of kpis and numberOfIterationsDecreased and numSitesForCustomers and sitesLabel and sitesTouched and vbool__5 and vbool__6 and must reset on changes to isDetractor</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12(bool initialise)
		{
			if (this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isDone&&((!initialise)||this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isInitialised)) {
				return ;
			}
			// Message to 'sites_depth0_marginal' from JaggedSubarrayWithMarginal factor
			this.sites_depth0_marginal_F = JaggedSubarrayWithMarginalOp<bool>.MarginalAverageConditional<DistributionStructArray<Bernoulli,bool>,Bernoulli,DistributionStructArray<Bernoulli,bool>>(this.sites_depth0_F, this.relevantSites_B, this.SitesTouched, this.sites_depth0_marginal_F);
			// Message to 'sites_depth0' from JaggedSubarrayWithMarginal factor
			this.sites_depth0_B = JaggedSubarrayWithMarginalOp<bool>.ArrayAverageConditional<DistributionStructArray<Bernoulli,bool>>(this.sites_depth0_F, this.sites_depth0_marginal_F, this.sites_depth0_B);
			for(int index0 = 0; index0<1500; index0++) {
				// Message to 'sites_uses' from Copy factor
				this.sites_uses_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.sites_uses_B[index0][1], this.sites_depth0_B[index0]);
				if (!this.Vbool__5[index0]) {
					// Message to 'sites_use' from Replicate factor
					this.sites_use_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.sites_uses_B[index0], this.sites_use_B[index0]);
					// Message to 'sites_index0_1__uses' from Copy factor
					this.sites_index0_1__uses_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.sites_index0_1__uses_B[index0][0], this.sites_use_B[index0]);
					// Message to 'sites_index0_1__uses' from Replicate factor
					this.sites_index0_1__uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Bernoulli>(this.sites_index0_1__uses_B[index0], this.sites_index0_1__F[index0], 1, this.sites_index0_1__uses_F[index0][1]);
					this.sites_index0_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.sites_index0_1__selector_uses_B_toDef[index0], this.sites_index0_1__uses_F[index0][1], this.sites_index0_1__selector_uses_F_marginal[index0]);
				}
			}
			for(int index1 = 0; index1<987; index1++) {
				// Message to 'sites_sitesTouched' from JaggedSubarrayWithMarginal factor
				this.sites_sitesTouched_F[index1] = JaggedSubarrayWithMarginalOp<bool>.ItemsAverageConditional<DistributionStructArray<Bernoulli,bool>,Bernoulli,DistributionStructArray<Bernoulli,bool>>(this.relevantSites_B[index1], this.sites_depth0_F, this.sites_depth0_marginal_F, this.SitesTouched, index1, this.sites_sitesTouched_F[index1]);
				for(int customersSites = 0; customersSites<this.NumSitesForCustomers[index1]; customersSites++) {
					// Message to 'vbool__8' from Not factor
					this.vbool__8_F[index1][customersSites] = BooleanNotOp.NotAverageConditional(this.sites_sitesTouched_F[index1][customersSites]);
				}
			}
			this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isDone = true;
			this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of kpis and numberOfIterationsDecreased and sitesLabel and vbool__5 and vbool__6 and must reset on changes to isDetractor and numSitesForCustomers and sitesTouched</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8(bool initialise)
		{
			if (this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isDone&&((!initialise)||this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Message to 'sites_uses' from Replicate factor
					this.sites_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Bernoulli>(this.sites_uses_B[index0], this.sites_index0_1__uses_F[index0][0], 1, this.sites_uses_F[index0][1]);
				}
				// Message to 'sites_depth0' from Copy factor
				this.sites_depth0_F[index0] = ArrayHelper.SetTo<Bernoulli>(this.sites_depth0_F[index0], this.sites_uses_F[index0][1]);
			}
			this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isDone = true;
			this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of kpis and numberOfIterationsDecreased and vbool__5 and must reset on changes to isDetractor and numSitesForCustomers and sitesLabel and sitesTouched and vbool__6</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7(bool initialise)
		{
			if (this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isDone&&((!initialise)||this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Message to 'precisions_0__1_' from VectorGaussian factor
					this.precisions_0__1__B[index0] = VectorGaussianOp_Laplace2.PrecisionAverageConditional(VectorGaussian.PointMass(this.Kpis[index0]), this.means_item0_rep_F[index0], this.precisions_rep2_F[index0], this.precisions_0__1__B[index0], this.precisions_0__1__B[index0]);
					// Message to 'sites_index0_1__selector_cases_1_uses' from VectorGaussian factor
					this.sites_index0_1__selector_cases_1_uses_B[index0][4] = Bernoulli.FromLogOdds(VectorGaussianOp_Laplace2.LogEvidenceRatio(this.Kpis[index0], this.means_item0_rep_F[index0], this.precisions_rep2_F[index0], this.precisions_0__1__B[index0]));
					// Message to 'sites_index0_1__selector_cases_1' from Replicate factor
					this.sites_index0_1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.sites_index0_1__selector_cases_1_uses_B[index0], this.sites_index0_1__selector_cases_1_B[index0]);
					// Message to 'sites_index0_1__selector_cases' from Copy factor
					this.sites_index0_1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.sites_index0_1__selector_cases_B[index0][1], this.sites_index0_1__selector_cases_1_B[index0]);
					// Message to 'precisions_1__0_' from VectorGaussian factor
					this.precisions_1__0__B[index0] = VectorGaussianOp_Laplace2.PrecisionAverageConditional(VectorGaussian.PointMass(this.Kpis[index0]), this.means_item1_rep_F[index0], this.precisions_rep_F[index0], this.precisions_1__0__B[index0], this.precisions_1__0__B[index0]);
					// Message to 'sites_index0_1__selector_cases_0_uses' from VectorGaussian factor
					this.sites_index0_1__selector_cases_0_uses_B[index0][4] = Bernoulli.FromLogOdds(VectorGaussianOp_Laplace2.LogEvidenceRatio(this.Kpis[index0], this.means_item1_rep_F[index0], this.precisions_rep_F[index0], this.precisions_1__0__B[index0]));
					// Message to 'sites_index0_1__selector_cases_0' from Replicate factor
					this.sites_index0_1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.sites_index0_1__selector_cases_0_uses_B[index0], this.sites_index0_1__selector_cases_0_B[index0]);
					// Message to 'sites_index0_1__selector_cases' from Copy factor
					this.sites_index0_1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.sites_index0_1__selector_cases_B[index0][0], this.sites_index0_1__selector_cases_0_B[index0]);
					// Message to 'sites_index0_1__selector_uses' from Cases factor
					this.sites_index0_1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.sites_index0_1__selector_cases_B[index0]);
					this.sites_index0_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.sites_index0_1__selector_uses_B[index0], this.sites_index0_1__selector_uses_B_toDef[index0]);
					// Message to 'sites_index0_1__uses' from Copy factor
					this.sites_index0_1__uses_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.sites_index0_1__uses_B[index0][1], this.sites_index0_1__selector_uses_B_toDef[index0]);
					// Message to 'sites_index0_1__use' from Replicate factor
					this.sites_index0_1__use_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.sites_index0_1__uses_B[index0], this.sites_index0_1__use_B[index0]);
					// Message to 'weights_1_' from Bernoulli factor
					this.weights_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.sites_index0_1__use_B[index0], this.weights_rep_F[index0]);
					// Message to 'weights_rep' from Copy factor
					this.weights_rep_B[index0] = ArrayHelper.SetTo<Beta>(this.weights_rep_B[index0], this.weights_1__B[index0]);
				}
			}
			this.weights_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.weights_rep_B, this.weights_rep_B_toDef);
			this.weights_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.weights_rep_B_toDef, this.vBeta2, this.weights_rep_F_marginal);
			for(int index0 = 0; index0<1500; index0++) {
				// Message to 'weights_rep' from Replicate factor
				this.weights_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.weights_rep_B[index0], this.weights_rep_F_marginal, index0, this.weights_rep_F[index0]);
				if (!this.Vbool__5[index0]) {
					// Message to 'sites_index0_1_' from Bernoulli factor
					this.sites_index0_1__F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.weights_rep_F[index0]);
					// Message to 'sites_index0_1__uses' from Replicate factor
					this.sites_index0_1__uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Bernoulli>(this.sites_index0_1__uses_B[index0], this.sites_index0_1__F[index0], 0, this.sites_index0_1__uses_F[index0][0]);
				}
			}
			this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isDone = true;
			this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to isDetractor and kpis and numSitesForCustomers and sitesLabel and sitesTouched and vbool__5 and vbool__6</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<1500; index0++) {
				this.sites_uses_B[index0][1] = Bernoulli.Uniform();
			}
			this.precisions_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Wishart>(this.precisions_F_reduced);
			this.precisions_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Wishart>(this.precisions_F_reduced);
			for(int index0 = 0; index0<1500; index0++) {
				this.precisions_rep2_F[index0] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
			}
			this.precisions_rep2_F_marginal = ReplicateOp_Divide.Marginal<Wishart>(this.precisions_rep2_B_toDef, this.precisions_F_reduced, this.precisions_rep2_F_marginal);
			for(int index0 = 0; index0<1500; index0++) {
				this.means_item0_rep_F[index0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
			}
			this.means_item0_uses_F[3] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
			this.means_item0_rep_F_marginal = ReplicateOp_Divide.MarginalInit<VectorGaussian>(this.means_item0_uses_F[3]);
			this.means_item0_rep_B_toDef = ReplicateOp_Divide.ToDefInit<VectorGaussian>(this.means_item0_uses_F[3]);
			this.means_item0_uses_F_marginal = ReplicateOp_Divide.MarginalInit<VectorGaussian>(this.means_item0_F);
			this.means_item0_uses_B_toDef = ReplicateOp_Divide.ToDefInit<VectorGaussian>(this.means_item0_F);
			this.means_item0_uses_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(this.means_item0_uses_B_toDef, this.means_item0_F, this.means_item0_uses_F_marginal);
			// Message to 'means_item0_uses' from Replicate factor
			this.means_item0_uses_F[3] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item0_rep_B_toDef, this.means_item0_uses_F_marginal, 3, this.means_item0_uses_F[3]);
			this.means_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(this.means_item0_rep_B_toDef, this.means_item0_uses_F[3], this.means_item0_rep_F_marginal);
			for(int index0 = 0; index0<1500; index0++) {
				this.precisions_rep_F[index0] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
			}
			this.precisions_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Wishart>(this.precisions_F_reduced);
			this.precisions_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Wishart>(this.precisions_F_reduced);
			this.precisions_rep_F_marginal = ReplicateOp_Divide.Marginal<Wishart>(this.precisions_rep_B_toDef, this.precisions_F_reduced, this.precisions_rep_F_marginal);
			for(int index0 = 0; index0<1500; index0++) {
				this.means_item1_rep_F[index0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
			}
			this.means_item1_uses_F[3] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
			this.means_item1_rep_F_marginal = ReplicateOp_Divide.MarginalInit<VectorGaussian>(this.means_item1_uses_F[3]);
			this.means_item1_rep_B_toDef = ReplicateOp_Divide.ToDefInit<VectorGaussian>(this.means_item1_uses_F[3]);
			this.means_item1_uses_F_marginal = ReplicateOp_Divide.MarginalInit<VectorGaussian>(this.means_item1_F);
			this.means_item1_uses_B_toDef = ReplicateOp_Divide.ToDefInit<VectorGaussian>(this.means_item1_F);
			this.means_item1_uses_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(this.means_item1_uses_B_toDef, this.means_item1_F, this.means_item1_uses_F_marginal);
			// Message to 'means_item1_uses' from Replicate factor
			this.means_item1_uses_F[3] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item1_rep_B_toDef, this.means_item1_uses_F_marginal, 3, this.means_item1_uses_F[3]);
			this.means_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<VectorGaussian>(this.means_item1_rep_B_toDef, this.means_item1_uses_F[3], this.means_item1_rep_F_marginal);
			for(int index0 = 0; index0<1500; index0++) {
				this.weights_rep_F[index0] = Beta.Uniform();
			}
			this.weights_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.vBeta2);
			this.weights_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.vBeta2);
			for(int index0 = 0; index0<1500; index0++) {
				this.sites_depth0_B[index0] = Bernoulli.Uniform();
				this.sites_depth0_F[index0] = Bernoulli.Uniform();
				this.sites_depth0_marginal_F[index0] = Bernoulli.Uniform();
			}
			this.means_item0_uses_B[1] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
			this.means_item1_uses_F[1] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
			this.means_item1_uses_B[1] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
			// Message to 'means_item1_uses' from Replicate factor
			this.means_item1_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item1_uses_B[1], this.means_item1_uses_F_marginal, 1, this.means_item1_uses_F[1]);
			this.means_item1_uses_F_1__ArrayMean = VectorElementOp.ArrayMeanInit(this.means_item1_uses_F[1]);
			this.means_item1_uses_F_1__ArrayVariance = VectorElementOp.ArrayVarianceInit(this.means_item1_uses_F[1]);
			this.means_item1_uses_F_1__ArrayVariance = VectorElementOp.ArrayVariance(this.means_item1_uses_F[1], this.means_item1_uses_F_1__ArrayVariance);
			this.means_item1_uses_F_1__ArrayMean = VectorElementOp.ArrayMean(this.means_item1_uses_F[1], this.means_item1_uses_F_1__ArrayVariance, this.means_item1_uses_F_1__ArrayMean);
			// Message to 'vdouble4' from GetItem factor
			this.vdouble4_F = VectorElementOp.ItemAverageConditional(this.means_item1_uses_F[1], this.means_item1_uses_F_1__ArrayMean, this.means_item1_uses_F_1__ArrayVariance, 0);
			this.means_item0_uses_B[2] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
			this.means_item1_uses_F[2] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
			this.means_item1_uses_B[2] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
			// Message to 'means_item1_uses' from Replicate factor
			this.means_item1_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item1_uses_B[2], this.means_item1_uses_F_marginal, 2, this.means_item1_uses_F[2]);
			this.means_item1_uses_F_2__ArrayMean = VectorElementOp.ArrayMeanInit(this.means_item1_uses_F[2]);
			this.means_item1_uses_F_2__ArrayVariance = VectorElementOp.ArrayVarianceInit(this.means_item1_uses_F[2]);
			this.means_item1_uses_F_2__ArrayVariance = VectorElementOp.ArrayVariance(this.means_item1_uses_F[2], this.means_item1_uses_F_2__ArrayVariance);
			this.means_item1_uses_F_2__ArrayMean = VectorElementOp.ArrayMean(this.means_item1_uses_F[2], this.means_item1_uses_F_2__ArrayVariance, this.means_item1_uses_F_2__ArrayMean);
			// Message to 'vdouble7' from GetItem factor
			this.vdouble7_F = VectorElementOp.ItemAverageConditional(this.means_item1_uses_F[2], this.means_item1_uses_F_2__ArrayMean, this.means_item1_uses_F_2__ArrayVariance, 1);
			this.falseDetractor_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.vBeta1);
			for(int index1 = 0; index1<987; index1++) {
				this.falseDetractor_rep_B[index1] = Beta.Uniform();
			}
			this.trueDetractor_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.vBeta0);
			for(int index1 = 0; index1<987; index1++) {
				this.trueDetractor_rep_B[index1] = Beta.Uniform();
			}
			this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numSitesForCustomers and must reset on changes to isDetractor and kpis and sitesLabel and sitesTouched and vbool__5 and vbool__6</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isInitialised)) {
				return ;
			}
			for(int index1 = 0; index1<987; index1++) {
				for(int customersSites = 0; customersSites<this.NumSitesForCustomers[index1]; customersSites++) {
					this.relevantSites_B[index1][customersSites] = Bernoulli.Uniform();
					this.sites_sitesTouched_F[index1][customersSites] = Bernoulli.Uniform();
					this.vbool__8_F[index1][customersSites] = Bernoulli.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isDone = true;
			this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and sitesLabel and vbool__5 and vbool__6 and must reset on changes to isDetractor and kpis and numSitesForCustomers and sitesTouched</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<1500; index0++) {
				if (this.Vbool__5[index0]) {
					// Message to 'sites_uses' from Replicate factor
					this.sites_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Bernoulli>(this.sites_uses_B[index0], this.sites_use_F[index0], 1, this.sites_uses_F[index0][1]);
				}
			}
			this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isDone = true;
			this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vbool__5 and must reset on changes to isDetractor and kpis and numSitesForCustomers and sitesLabel and sitesTouched and vbool__6</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<1500; index0++) {
				this.sites_use_B[index0] = Bernoulli.Uniform();
				this.precisions_rep2_B[index0] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
				// Message to 'precisions_rep2' from Replicate factor
				this.precisions_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Wishart>(this.precisions_rep2_B[index0], this.precisions_rep2_F_marginal, index0, this.precisions_rep2_F[index0]);
				if (!this.Vbool__5[index0]) {
					this.precisions_0__1__B[index0] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
				}
				this.means_item0_rep_B[index0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
				// Message to 'means_item0_rep' from Replicate factor
				this.means_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item0_rep_B[index0], this.means_item0_rep_F_marginal, index0, this.means_item0_rep_F[index0]);
				if (!this.Vbool__5[index0]) {
					this.sites_index0_1__selector_cases_1_uses_B[index0][4] = Bernoulli.Uniform();
					this.sites_index0_1__selector_cases_1_B[index0] = Bernoulli.Uniform();
				}
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					if (!this.Vbool__5[index0]) {
						this.sites_index0_1__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
					}
				}
				if (!this.Vbool__5[index0]) {
					this.sites_index0_1__selector_uses_B[index0][0] = Bernoulli.Uniform();
					this.sites_index0_1__selector_cases_0_B[index0] = Bernoulli.Uniform();
					this.sites_index0_1__selector_cases_0_uses_B[index0][4] = Bernoulli.Uniform();
					this.precisions_1__0__B[index0] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
				}
				this.precisions_rep_B[index0] = ArrayHelper.MakeUniform<Wishart>(Wishart.Uniform(this.vPositiveDefiniteMatrix3.Rows));
				// Message to 'precisions_rep' from Replicate factor
				this.precisions_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Wishart>(this.precisions_rep_B[index0], this.precisions_rep_F_marginal, index0, this.precisions_rep_F[index0]);
				this.means_item1_rep_B[index0] = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
				// Message to 'means_item1_rep' from Replicate factor
				this.means_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<VectorGaussian>(this.means_item1_rep_B[index0], this.means_item1_rep_F_marginal, index0, this.means_item1_rep_F[index0]);
				if (!this.Vbool__5[index0]) {
					this.sites_index0_1__uses_F[index0][1] = Bernoulli.Uniform();
					this.sites_index0_1__uses_F[index0][0] = Bernoulli.Uniform();
					this.sites_index0_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.sites_index0_1__uses_F[index0][1]);
					this.sites_index0_1__F[index0] = Bernoulli.Uniform();
				}
				this.weights_rep_B[index0] = Beta.Uniform();
				if (!this.Vbool__5[index0]) {
					this.weights_1__B[index0] = Beta.Uniform();
					this.sites_index0_1__use_B[index0] = Bernoulli.Uniform();
					this.sites_index0_1__uses_B[index0][0] = Bernoulli.Uniform();
					this.sites_index0_1__uses_B[index0][1] = Bernoulli.Uniform();
					this.sites_index0_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.sites_index0_1__uses_F[index0][1]);
				}
				this.sites_uses_F[index0][1] = Bernoulli.Uniform();
			}
			this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isDone = true;
			this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numSitesForCustomers</summary>
		private void Changed_numSitesForCustomers()
		{
			if (this.Changed_numSitesForCustomers_isDone) {
				return ;
			}
			for(int index1 = 0; index1<987; index1++) {
				// Create array for 'relevantSites' Backwards messages.
				this.relevantSites_B[index1] = new DistributionStructArray<Bernoulli,bool>(this.NumSitesForCustomers[index1]);
				// Create array for 'sites_sitesTouched' Forwards messages.
				this.sites_sitesTouched_F[index1] = new DistributionStructArray<Bernoulli,bool>(this.NumSitesForCustomers[index1]);
				// Create array for 'vbool__8' Forwards messages.
				this.vbool__8_F[index1] = new DistributionStructArray<Bernoulli,bool>(this.NumSitesForCustomers[index1]);
			}
			this.Changed_numSitesForCustomers_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of sitesLabel</summary>
		private void Changed_sitesLabel()
		{
			if (this.Changed_sitesLabel_isDone) {
				return ;
			}
			// Create array for 'sitesLabel_marginal' Forwards messages.
			this.sitesLabel_marginal_F = new DistributionStructArray<Bernoulli,bool>(1500);
			for(int index0 = 0; index0<1500; index0++) {
				this.sitesLabel_marginal_F[index0] = Bernoulli.Uniform();
			}
			// Message to 'sitesLabel_marginal' from DerivedVariable factor
			this.sitesLabel_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Bernoulli,bool>,bool[]>(this.SitesLabel, this.sitesLabel_marginal_F);
			this.Changed_sitesLabel_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of sitesLabel and vbool__6</summary>
		private void Changed_sitesLabel_vbool__6()
		{
			if (this.Changed_sitesLabel_vbool__6_isDone) {
				return ;
			}
			for(int index0 = 0; index0<1500; index0++) {
				if (this.Vbool__6[index0]) {
					// Message to 'sites_index0_0_2' from Equal factor
					this.sites_index0_0_2_B[index0] = ConstrainEqualOp<bool>.BAverageConditional<Bernoulli>(this.SitesLabel[index0], this.sites_index0_0_2_B[index0]);
					// Message to 'sites_uses' from Copy factor
					this.sites_uses_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.sites_uses_B[index0][0], this.sites_index0_0_2_B[index0]);
				}
			}
			this.Changed_sitesLabel_vbool__6_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vbool__5</summary>
		private void Changed_vbool__5()
		{
			if (this.Changed_vbool__5_isDone) {
				return ;
			}
			// Create array for replicates of 'precisions_0__1__B'
			this.precisions_0__1__B = new Wishart[1500];
			// Create array for replicates of 'sites_index0_1__selector_cases_1_uses_B'
			this.sites_index0_1__selector_cases_1_uses_B = new Bernoulli[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Create array for 'sites_index0_1__selector_cases_1_uses' Backwards messages.
					this.sites_index0_1__selector_cases_1_uses_B[index0] = new Bernoulli[5];
					this.sites_index0_1__selector_cases_1_uses_B[index0][3] = Bernoulli.Uniform();
					this.sites_index0_1__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
					this.sites_index0_1__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
					this.sites_index0_1__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'sites_index0_1__selector_cases_1_B'
			this.sites_index0_1__selector_cases_1_B = new Bernoulli[1500];
			// Create array for replicates of 'sites_index0_1__selector_cases_B'
			this.sites_index0_1__selector_cases_B = new DistributionStructArray<Bernoulli,bool>[1500];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Create array for 'sites_index0_1__selector_cases' Backwards messages.
					this.sites_index0_1__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
				}
			}
			// Create array for replicates of 'sites_index0_1__selector_uses_B'
			this.sites_index0_1__selector_uses_B = new Bernoulli[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Create array for 'sites_index0_1__selector_uses' Backwards messages.
					this.sites_index0_1__selector_uses_B[index0] = new Bernoulli[5];
					this.sites_index0_1__selector_uses_B[index0][4] = Bernoulli.Uniform();
					this.sites_index0_1__selector_uses_B[index0][3] = Bernoulli.Uniform();
					this.sites_index0_1__selector_uses_B[index0][2] = Bernoulli.Uniform();
					this.sites_index0_1__selector_uses_B[index0][1] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'sites_index0_1__selector_cases_0_B'
			this.sites_index0_1__selector_cases_0_B = new Bernoulli[1500];
			// Create array for replicates of 'sites_index0_1__selector_cases_0_uses_B'
			this.sites_index0_1__selector_cases_0_uses_B = new Bernoulli[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Create array for 'sites_index0_1__selector_cases_0_uses' Backwards messages.
					this.sites_index0_1__selector_cases_0_uses_B[index0] = new Bernoulli[5];
					this.sites_index0_1__selector_cases_0_uses_B[index0][3] = Bernoulli.Uniform();
					this.sites_index0_1__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
					this.sites_index0_1__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
					this.sites_index0_1__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'precisions_1__0__B'
			this.precisions_1__0__B = new Wishart[1500];
			// Create array for replicates of 'sites_index0_1__selector_uses_F_marginal'
			this.sites_index0_1__selector_uses_F_marginal = new Bernoulli[1500];
			// Create array for replicates of 'sites_index0_1__uses_F'
			this.sites_index0_1__uses_F = new Bernoulli[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Create array for 'sites_index0_1__uses' Forwards messages.
					this.sites_index0_1__uses_F[index0] = new Bernoulli[2];
				}
			}
			// Create array for replicates of 'sites_index0_1__F'
			this.sites_index0_1__F = new Bernoulli[1500];
			// Create array for replicates of 'weights_1__B'
			this.weights_1__B = new Beta[1500];
			// Create array for replicates of 'sites_index0_1__use_B'
			this.sites_index0_1__use_B = new Bernoulli[1500];
			// Create array for replicates of 'sites_index0_1__uses_B'
			this.sites_index0_1__uses_B = new Bernoulli[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				if (!this.Vbool__5[index0]) {
					// Create array for 'sites_index0_1__uses' Backwards messages.
					this.sites_index0_1__uses_B[index0] = new Bernoulli[2];
				}
			}
			// Create array for replicates of 'sites_index0_1__selector_uses_B_toDef'
			this.sites_index0_1__selector_uses_B_toDef = new Bernoulli[1500];
			// Create array for 'vbool__5_marginal' Forwards messages.
			this.vbool__5_marginal_F = new DistributionStructArray<Bernoulli,bool>(1500);
			for(int index0 = 0; index0<1500; index0++) {
				this.vbool__5_marginal_F[index0] = Bernoulli.Uniform();
			}
			// Message to 'vbool__5_marginal' from DerivedVariable factor
			this.vbool__5_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Vbool__5, this.vbool__5_marginal_F);
			this.Changed_vbool__5_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vbool__6</summary>
		private void Changed_vbool__6()
		{
			if (this.Changed_vbool__6_isDone) {
				return ;
			}
			// Create array for replicates of 'sites_index0_0_2_B'
			this.sites_index0_0_2_B = new Bernoulli[1500];
			for(int index0 = 0; index0<1500; index0++) {
				this.sites_uses_B[index0][0] = Bernoulli.Uniform();
				if (this.Vbool__6[index0]) {
					this.sites_index0_0_2_B[index0] = Bernoulli.Uniform();
				}
			}
			// Create array for 'vbool__6_marginal' Forwards messages.
			this.vbool__6_marginal_F = new DistributionStructArray<Bernoulli,bool>(1500);
			for(int index0 = 0; index0<1500; index0++) {
				this.vbool__6_marginal_F[index0] = Bernoulli.Uniform();
			}
			// Message to 'vbool__6_marginal' from DerivedVariable factor
			this.vbool__6_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Vbool__6, this.vbool__6_marginal_F);
			this.Changed_vbool__6_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'sites_use' Backwards messages.
			this.sites_use_B = new DistributionStructArray<Bernoulli,bool>(1500);
			// Create array for 'sites_uses' Backwards messages.
			this.sites_uses_B = new Bernoulli[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				// Create array for 'sites_uses' Backwards messages.
				this.sites_uses_B[index0] = new Bernoulli[2];
			}
			this.vPositiveDefiniteMatrix3 = new PositiveDefiniteMatrix(new double[2, 2] {{1.0, 0.0}, {0.0, 1.0}});
			// Message to 'precisions' from SampleFromShapeAndScale factor
			this.precisions_F_reduced = WishartFromShapeAndScaleOp.SampleAverageConditional(0.10000000149011612, this.vPositiveDefiniteMatrix3);
			// Create array for 'precisions_rep2' Forwards messages.
			this.precisions_rep2_F = new Wishart[1500];
			// Create array for 'precisions_rep2' Backwards messages.
			this.precisions_rep2_B = new Wishart[1500];
			// Create array for 'means_item0_rep' Forwards messages.
			this.means_item0_rep_F = new VectorGaussian[1500];
			this.means_mp = new VectorGaussian[2];
			DenseVector vVector1 = DenseVector.FromArray(new double[2] {0.0, 0.0});
			this.means_mp[0] = VectorGaussian.Uniform(vVector1.Count);
			// Create array for 'means_item0_rep' Backwards messages.
			this.means_item0_rep_B = new VectorGaussian[1500];
			// Create array for 'means_item0_uses' Forwards messages.
			this.means_item0_uses_F = new VectorGaussian[4];
			this.means_item0_F = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[0]);
			PositiveDefiniteMatrix vPositiveDefiniteMatrix0 = new PositiveDefiniteMatrix(new double[2, 2] {{0.10000000149011612, 0.0}, {0.0, 0.10000000149011612}});
			// Message to 'means_item0' from VectorGaussian factor
			this.means_item0_F = VectorGaussianOp.SampleAverageConditional(vVector1, vPositiveDefiniteMatrix0, this.means_item0_F);
			// Create array for 'precisions_rep' Forwards messages.
			this.precisions_rep_F = new Wishart[1500];
			// Create array for 'precisions_rep' Backwards messages.
			this.precisions_rep_B = new Wishart[1500];
			// Create array for 'means_item1_rep' Forwards messages.
			this.means_item1_rep_F = new VectorGaussian[1500];
			this.means_mp[1] = VectorGaussian.Uniform(vVector1.Count);
			// Create array for 'means_item1_rep' Backwards messages.
			this.means_item1_rep_B = new VectorGaussian[1500];
			// Create array for 'means_item1_uses' Forwards messages.
			this.means_item1_uses_F = new VectorGaussian[4];
			this.means_item1_F = ArrayHelper.MakeUniform<VectorGaussian>(this.means_mp[1]);
			// Message to 'means_item1' from VectorGaussian factor
			this.means_item1_F = VectorGaussianOp.SampleAverageConditional(vVector1, vPositiveDefiniteMatrix0, this.means_item1_F);
			// Create array for 'weights_rep' Forwards messages.
			this.weights_rep_F = new Beta[1500];
			// Create array for 'weights_rep' Backwards messages.
			this.weights_rep_B = new Beta[1500];
			this.vBeta2 = Beta.Uniform();
			// Create array for 'sites_depth0' Backwards messages.
			this.sites_depth0_B = new DistributionStructArray<Bernoulli,bool>(1500);
			// Create array for 'sites_depth0' Forwards messages.
			this.sites_depth0_F = new DistributionStructArray<Bernoulli,bool>(1500);
			// Create array for 'sites_uses' Forwards messages.
			this.sites_uses_F = new Bernoulli[1500][];
			for(int index0 = 0; index0<1500; index0++) {
				// Create array for 'sites_uses' Forwards messages.
				this.sites_uses_F[index0] = new Bernoulli[2];
			}
			// Create array for 'sites_use' Forwards messages.
			this.sites_use_F = new DistributionStructArray<Bernoulli,bool>(1500);
			for(int index0 = 0; index0<1500; index0++) {
				this.sites_use_F[index0] = Bernoulli.Uniform();
			}
			// Create array for 'sites_depth0_marginal' Forwards messages.
			this.sites_depth0_marginal_F = new DistributionStructArray<Bernoulli,bool>(1500);
			// Create array for replicates of 'relevantSites_B'
			this.relevantSites_B = new DistributionStructArray<Bernoulli,bool>[987];
			// Create array for 'means_item1_uses' Backwards messages.
			this.means_item1_uses_B = new VectorGaussian[4];
			// Create array for 'means_item0_uses' Backwards messages.
			this.means_item0_uses_B = new VectorGaussian[4];
			// Create array for 'sites_sitesTouched' Forwards messages.
			this.sites_sitesTouched_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(987);
			this.vBeta1 = new Beta(2.0, 5.0);
			// Create array for 'falseDetractor_rep' Backwards messages.
			this.falseDetractor_rep_B = new Beta[987];
			this.vBeta0 = new Beta(5.0, 2.0);
			// Create array for 'trueDetractor_rep' Backwards messages.
			this.trueDetractor_rep_B = new Beta[987];
			// Create array for replicates of 'vbool__8_F'
			this.vbool__8_F = new DistributionStructArray<Bernoulli,bool>[987];
			this.vbool9 = true;
			Constrain.Equal<bool>(true, this.vbool9);
			this.vbool11 = true;
			Constrain.Equal<bool>(true, this.vbool11);
			this.vbool9_marginal_F = Bernoulli.Uniform();
			// Message to 'vbool9_marginal' from DerivedVariable factor
			this.vbool9_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli,bool>(this.vbool9, this.vbool9_marginal_F);
			this.vbool11_marginal_F = Bernoulli.Uniform();
			// Message to 'vbool11_marginal' from DerivedVariable factor
			this.vbool11_marginal_F = DerivedVariableOp.MarginalAverageConditional<Bernoulli,bool>(this.vbool11, this.vbool11_marginal_F);
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5_isDone = false;
					this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2_isDone = false;
					this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9_isDone = false;
					this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7_isDone = false;
					this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8_isDone = false;
					this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12_isDone = false;
				}
				this.Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0_isDone = false;
			}
			this.Changed_isDetractor();
			this.Changed_sitesLabel();
			this.Changed_vbool__5();
			this.Constant();
			this.Changed_numSitesForCustomers();
			this.Changed_numberOfIterationsDecreased_numSitesForCustomers_Init_isDetractor_kpis_sitesLabel_sitesTouch11(initialise);
			this.Changed_numberOfIterationsDecreased_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_sitesTouch5(initialise);
			this.Changed_vbool__6();
			this.Changed_sitesLabel_vbool__6();
			this.Changed_numberOfIterationsDecreased_vbool__5_Init_isDetractor_kpis_numSitesForCustomers_sitesLabel_s2(initialise);
			this.Changed_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_kpis_numSitesForCu9(initialise);
			this.Changed_kpis_numberOfIterationsDecreased_vbool__5_Init_isDetractor_numSitesForCustomers_sitesLabel_s7(initialise);
			this.Changed_kpis_numberOfIterationsDecreased_sitesLabel_vbool__5_vbool__6_Init_isDetractor_numSitesForCu8(initialise);
			this.Changed_kpis_numberOfIterationsDecreased_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vbool12(initialise);
			this.Changed_isDetractor_kpis_numberOfIterations_numSitesForCustomers_sitesLabel_sitesTouched_vbool__5_vb0(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>
		/// Returns the marginal distribution for 'falseDetractor' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta FalseDetractorMarginal()
		{
			return this.falseDetractor_marginal_F;
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="numSitesForCustomers") {
				return this.numSitesForCustomers;
			}
			if (variableName=="sitesTouched") {
				return this.sitesTouched;
			}
			if (variableName=="sitesLabel") {
				return this.sitesLabel;
			}
			if (variableName=="isDetractor") {
				return this.isDetractor;
			}
			if (variableName=="kpis") {
				return this.kpis;
			}
			if (variableName=="vbool__5") {
				return this.vbool__5;
			}
			if (variableName=="vbool__6") {
				return this.vbool__6;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'hadBadSiteInt' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> HadBadSiteIntMarginal()
		{
			return this.hadBadSiteInt_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'isDetractor' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> IsDetractorMarginal()
		{
			return this.isDetractor_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="isDetractor") {
				return this.IsDetractorMarginal();
			}
			if (variableName=="sitesLabel") {
				return this.SitesLabelMarginal();
			}
			if (variableName=="vbool__5") {
				return this.Vbool__5Marginal();
			}
			if (variableName=="vbool9") {
				return this.Vbool9Marginal();
			}
			if (variableName=="vbool11") {
				return this.Vbool11Marginal();
			}
			if (variableName=="vbool__6") {
				return this.Vbool__6Marginal();
			}
			if (variableName=="sites") {
				return this.SitesMarginal();
			}
			if (variableName=="hadBadSiteInt") {
				return this.HadBadSiteIntMarginal();
			}
			if (variableName=="trueDetractor") {
				return this.TrueDetractorMarginal();
			}
			if (variableName=="falseDetractor") {
				return this.FalseDetractorMarginal();
			}
			if (variableName=="means") {
				return this.MeansMarginal();
			}
			if (variableName=="precisions") {
				return this.PrecisionsMarginal();
			}
			if (variableName=="weights") {
				return this.WeightsMarginal();
			}
			if (variableName=="vdouble4") {
				return this.Vdouble4Marginal();
			}
			if (variableName=="vdouble5") {
				return this.Vdouble5Marginal();
			}
			if (variableName=="vdouble6") {
				return this.Vdouble6Marginal();
			}
			if (variableName=="vdouble7") {
				return this.Vdouble7Marginal();
			}
			if (variableName=="vdouble8") {
				return this.Vdouble8Marginal();
			}
			if (variableName=="vdouble9") {
				return this.Vdouble9Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'means' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<VectorGaussian,Vector> MeansMarginal()
		{
			return this.means_marginal_F;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'precisions' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Wishart,PositiveDefiniteMatrix> PrecisionsMarginal()
		{
			return this.precisions_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="numSitesForCustomers") {
				this.numSitesForCustomers = (int[])value;
				return ;
			}
			if (variableName=="sitesTouched") {
				this.sitesTouched = (int[][])value;
				return ;
			}
			if (variableName=="sitesLabel") {
				this.sitesLabel = (bool[])value;
				return ;
			}
			if (variableName=="isDetractor") {
				this.isDetractor = (bool[])value;
				return ;
			}
			if (variableName=="kpis") {
				this.kpis = (Vector[])value;
				return ;
			}
			if (variableName=="vbool__5") {
				this.vbool__5 = (bool[])value;
				return ;
			}
			if (variableName=="vbool__6") {
				this.vbool__6 = (bool[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'sitesLabel' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> SitesLabelMarginal()
		{
			return this.sitesLabel_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'sites' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> SitesMarginal()
		{
			return this.sites_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'trueDetractor' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta TrueDetractorMarginal()
		{
			return this.trueDetractor_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool__5' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> Vbool__5Marginal()
		{
			return this.vbool__5_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool__6' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> Vbool__6Marginal()
		{
			return this.vbool__6_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool11' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool11Marginal()
		{
			return this.vbool11_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool9' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli Vbool9Marginal()
		{
			return this.vbool9_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble4Marginal()
		{
			return this.vdouble4_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble5' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble5Marginal()
		{
			return this.vdouble5_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble6' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble6Marginal()
		{
			return this.vdouble6_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble7' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble7Marginal()
		{
			return this.vdouble7_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble8' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble8Marginal()
		{
			return this.vdouble8_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble9' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble9Marginal()
		{
			return this.vdouble9_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'weights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta WeightsMarginal()
		{
			return this.weights_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
